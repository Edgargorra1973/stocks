# GitHub Actions: Deploy Python app to Azure Web App - stocks
name: Build and deploy Python app to Azure Web App - stocks

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Construcción de imagen Docker
      - name: Construir imagen Docker
        run: docker build -t my-python-app .

      # Opcional: Verificar que la imagen funciona localmente
      - name: Probar contenedor Docker
        run: docker run --rm my-python-app

      # Crear un artefacto con la imagen Docker
      - name: Guardar imagen Docker como artefacto
        run: |
          docker save my-python-app | gzip > my-python-app.tar.gz
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: my-python-app.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'

    steps:
      - name: Descargar artefacto del trabajo de build
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Cargar imagen Docker
        run: |
          gunzip < my-python-app.tar.gz | docker load

      # Iniciar sesión en Azure para despliegue
      - name: Iniciar sesión en Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID }}

      # Subir la imagen a Azure Web App
      - name: Desplegar contenedor en Azure Web App
        uses: azure/webapps-container-deploy@v2
        with:
          app-name: 'stocks'
          images: my-python-app:latest

      - name: Notificación de estado
        if: failure() || success()
        run: echo "El workflow finalizó con el estado ${{ job.status }}"
